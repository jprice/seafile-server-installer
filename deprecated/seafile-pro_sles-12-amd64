#!/bin/bash
(
#
# seafile-server-installer/seafile-sles-12-amd64
#
# Copyright 2015, Alexander Jackson <alexander.jackson@seafile.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Uncomment to run in verbose mode
set -x

cat <<EOF
BETA Installer - dont use yet...

Issues
 a. Abort if user seafile exists is broke
 b. Securing MariaDB
 c. Autoupdate
 d. Seafile logrotate

Seafile will work but not all features will be available until these issues are fixed...
EOF


# -------------------------------------------
# Make sure hosts entry exists
# -------------------------------------------
line="$(ip addr show eth0 | grep "inet " | awk '{ print $2 }' | awk -F'/' '{ print $1 }') $(hostname)"
(cat /etc/hosts; echo "${line}") | uniq > /etc/hosts.uniq ; mv -f /etc/hosts.uniq /etc/hosts


# -------------------------------------------
# Vars
# -------------------------------------------
SERVER_NAME=$(hostname -s | cut -c -16)
HOSTNAME=$(hostname -f)
SEAFILE_ADMIN=admin@${HOSTNAME}
SEAFILE_USER=seafile
FILESERVER_PORT=8082
SERVER_PORT=10001
SEAFILE_SERVER_PORT=12001
SEAFILE_DIR=/opt/seafile
SEAFILE_TIME_ZONE="Europe/Berlin"
# Don't touch the following variable, unless you know what you are doing
SEAFILE_EDITION=pro-server
SEAFILE_SOURCE=$(find /usr/src/seafile/seafile-${SEAFILE_EDITION}_*_x86-64.tar.gz | sort -r | head -1)
SEAFILE_VERSION=$(echo ${SEAFILE_SOURCE} | awk -F '_' '{ print $2}')
#export DEBIAN_FRONTEND=noninteractive
#OS=$(yum version | grep "^Installed:" | awk '{ print $2 }' | awk -F'/' '{ print $1 }')
# Get architecture
if [ $(getconf LONG_BIT) = "64" ]
  then
    ARCH=x86-64
  else
    ARCH=i386
fi
#PACKAGE_ARCH=$(yum version | grep "^Installed:" | awk '{ print $2 }' | awk -F'/' '{ print $2 }')


# -------------------------------------------
# Functions
# -------------------------------------------
function print-system-infos {
# -------------------------------------------
# Log system infos
# -------------------------------------------
echo Timestamp
echo -----------------------------------------------------------------
date
echo
echo
echo Hostnames
echo -----------------------------------------------------------------
echo "$(hostname -f),$(hostname -s),$(hostname -d),$(hostname -i)"
echo
echo
echo Content of /etc/hosts
echo -----------------------------------------------------------------
cat /etc/hosts
echo
echo
echo OS Architecture
echo -----------------------------------------------------------------
echo ${ARCH}
echo
echo
echo Package Architecture
echo -----------------------------------------------------------------
echo ${PACKAGE_ARCH}
echo
echo
echo Active Kernel
echo -----------------------------------------------------------------
uname -a
echo
echo
echo Network Interfaces
echo -----------------------------------------------------------------
ip link show
echo
echo
echo IP Addresses
echo -----------------------------------------------------------------
ip addr show
echo
echo
echo DNS Servers
echo -----------------------------------------------------------------
cat /etc/resolv.conf
echo
echo
echo Routes
echo -----------------------------------------------------------------
ip route show table all
echo
echo
echo "Content of /etc/sysconfig/network/ifcfg-eth*"
echo -----------------------------------------------------------------
for eth in /etc/sysconfig/network/ifcfg-eth* ; do echo ${eth} ; cat ${eth} ; done
echo
echo
echo SUSE Version
echo -----------------------------------------------------------------
cat /etc/issue
echo
echo
#find /etc/yum/ -type f | while read line ; do echo ; \
#    echo Content of ${line} ; \
#    echo ----------------------------------------------------------------- ; \
#    cat ${line} ; \
#	echo ;
#done
echo
echo
echo Installed packages
echo -----------------------------------------------------------------
zypper repos
echo
zypper search --installed-only
echo
echo
echo Process List
echo -----------------------------------------------------------------
ps axu
echo
echo
echo Local user accounts
echo -----------------------------------------------------------------
cat /etc/passwd
}


# -------------------------------------------
# Seafile Server Professional Edition on Debian (64bit)
# -------------------------------------------
clear
cat <<EOF

  Install Seafile Server Professional Edition on SUSE Enterprise Linux 12.
  Seafile Server Professional Edition is only available for 64bit.

  - Seafile Professional, NGINX, MariaDB, Memcached -
  -----------------------------------------------------------------

  This installer is meant to run on a freshly installed machine
  only. If you run it on a production server things can and
  probably will go terribly wrong and you will lose valuable
  data!

  For questions or suggestions please contact me at
  alexander.jackson@seafile.de

  -----------------------------------------------------------------

  Hit return to proceed or CTRL-C to abort.

EOF
read dummy
clear


# -------------------------------------------
# Start the magic
# -------------------------------------------
print-system-infos


# -------------------------------------------
# Ensure we are running the installer as root
# -------------------------------------------
if [[ $EUID -ne 0 ]]; then
  echo "  Aborting because you are not root" ; exit 1
fi


# -------------------------------------------
# Abort if user seafile exists
# -------------------------------------------
#if getent passwd ${SEAFILE_USER} > /dev/null 2>&1 ; # FIXME broke on SLES 12...
#then
#  echo "  Aborting because user ${SEAFILE_USER} already exist" ; exit 1
#fi


# -------------------------------------------
# Abort if directory /opt/seafile/ exists
# -------------------------------------------
if [[ -d "/opt/seafile/" ]] ;
then
  echo "  Aborting because directory /opt/seafile/ already exist" ; exit 1
fi


# -------------------------------------------
# Abort if Seafile Professional source is missing
# -------------------------------------------
if [[ -f ${SEAFILE_SOURCE} ]] ;
then
  echo "  Found ${SEAFILE_SOURCE}. Proceeding with installation..."
else
  echo "  Aborting because ${SEAFILE_SOURCE} is missing" ; exit 1
fi


# -------------------------------------------
# SELinux
# -------------------------------------------
# Put SELinux in permissive mode
#setenforce 0
# Put SELinux in permissive mode permanently
#sed -i 's/^SELINUX=.*/SELINUX=permissive/' /etc/selinux/config


# -------------------------------------------
# Add Extra Packages for Enterprise Linux (EPEL)
# -------------------------------------------
#yum install epel-release -y


# -------------------------------------------
# Upgrade System
# -------------------------------------------
zypper refresh
zypper --non-interactive update


# -------------------------------------------
# Additional requirements
# -------------------------------------------
zypper --non-interactive install sudo ntp less curl openssl net-tools lsof deltarpm


# -------------------------------------------
# Homemade pwgen
# -------------------------------------------
cat > /usr/local/bin/pwgen <<'EOF'
#!/bin/bash
length=${1}
[[ "${1}" == "" ]] && length=16
tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${length} | xargs
EOF

chmod +x /usr/local/bin/pwgen


# -------------------------------------------
# ensure correct time is set
# -------------------------------------------
ntpd -gq


# -------------------------------------------
# Security programs
# -------------------------------------------
zypper --non-interactive install SuSEfirewall2


# -------------------------------------------
# Activate firewall
# https://en.opensuse.org/SuSEfirewall2
# http://docs.saltstack.com/en/latest/topics/tutorials/firewall.html
# -------------------------------------------
for i in ssh http https ; do SuSEfirewall2 open EXT TCP ${i} ; done
for i in stop start ; do SuSEfirewall2 ${i} ; done


# -------------------------------------------
# Postfix
# -------------------------------------------
zypper --non-interactive install postfix


# -------------------------------------------
# Unattended upgrades
# -------------------------------------------
# See https://www.suse.com/documentation/sles-12/pdfdoc/book_sle_admin/book_sle_admin.pdf (1.3 Automatic Online Update) if you want this. I am not touching this for now...


# -------------------------------------------
# Seafile Professional requirements
# -------------------------------------------
zypper --non-interactive install java-1_7_0-openjdk poppler-tools python-devel python-setuptools python-imaging python-mysql

# Install memcached from OpenSUSE 13.2
cd /usr/src
curl -OL http://mirror.optimate-server.de/opensuse/distribution/13.2/repo/oss/suse/x86_64/memcached-1.4.20-2.1.2.x86_64.rpm
rpm -i memcached-1.4.20-2.1.2.x86_64.rpm
systemctl enable memcached
systemctl start memcached

# Install python-python-memcached from OpenSUSE 12.2
curl -OL http://widehat.opensuse.org/ports/ppc/distribution/12.2/repo/oss/suse/noarch/python-python-memcached-1.47-3.1.4.noarch.rpm
rpm -i python-python-memcached-1.47-3.1.4.noarch.rpm

# Install LibreOffice 4.4.5.1 from The Document Foundations archive
zypper --non-interactive install libGLU1 gnome-vfs2
cd /usr/src
wget https://downloadarchive.documentfoundation.org/libreoffice/old/4.4.5.1/rpm/x86_64/LibreOffice_4.4.5.1_Linux_x86-64_rpm.tar.gz
tar xzf LibreOffice_4.4.5.1_Linux_x86-64_rpm.tar.gz
rpm -i LibreOffice_4.4.5.1_Linux_x86-64_rpm/RPMS/*.rpm


# -------------------------------------------
# NGINX
# -------------------------------------------
zypper addrepo -G -t yum -c 'http://nginx.org/packages/sles/12' nginx
zypper --non-interactive install nginx
systemctl enable nginx

rm -rf /etc/nginx/conf.d/*

cat > /etc/nginx/conf.d/seafile.conf <<'EOF'
server {
  listen       80;
  server_name  "";
  return 301 https://$http_host$request_uri;
}

server {
  listen 443 spdy;
  server_name  "";

  ssl on;
  ssl_certificate /etc/nginx/ssl/seafile.crt;
  ssl_certificate_key /etc/nginx/ssl/seafile.key;

  location / {
    fastcgi_pass    127.0.0.1:8000;
    fastcgi_param   SCRIPT_FILENAME     $document_root$fastcgi_script_name;
    fastcgi_param   PATH_INFO           $fastcgi_script_name;
    fastcgi_param   SERVER_PROTOCOL     $server_protocol;
    fastcgi_param   QUERY_STRING        $query_string;
    fastcgi_param   REQUEST_METHOD      $request_method;
    fastcgi_param   CONTENT_TYPE        $content_type;
    fastcgi_param   CONTENT_LENGTH      $content_length;
    fastcgi_param   SERVER_ADDR         $server_addr;
    fastcgi_param   SERVER_PORT         $server_port;
    fastcgi_param   SERVER_NAME         $server_name;
    fastcgi_param   HTTPS               on;
    fastcgi_param   HTTP_SCHEME         https;
    access_log      /var/log/nginx/seahub.access.log;
    error_log       /var/log/nginx/seahub.error.log;
  }

  location /seafhttp {
    rewrite ^/seafhttp(.*)$ $1 break;
    proxy_pass http://127.0.0.1:8082;
    client_max_body_size 0;
    proxy_connect_timeout  36000s;
    proxy_read_timeout  36000s;
  }

  location /media {
    root /opt/seafile/seafile-server-latest/seahub;
  }

  location /seafdav {
    fastcgi_pass    127.0.0.1:8080;
    fastcgi_param   SCRIPT_FILENAME     $document_root$fastcgi_script_name;
    fastcgi_param   PATH_INFO           $fastcgi_script_name;
    fastcgi_param   SERVER_PROTOCOL     $server_protocol;
    fastcgi_param   QUERY_STRING        $query_string;
    fastcgi_param   REQUEST_METHOD      $request_method;
    fastcgi_param   CONTENT_TYPE        $content_type;
    fastcgi_param   CONTENT_LENGTH      $content_length;
    fastcgi_param   SERVER_ADDR         $server_addr;
    fastcgi_param   SERVER_PORT         $server_port;
    fastcgi_param   SERVER_NAME         $server_name;
    fastcgi_param   HTTPS               on;
    client_max_body_size 0;
    access_log      /var/log/nginx/seafdav.access.log;
    error_log       /var/log/nginx/seafdav.error.log;
  }
}
EOF


# -------------------------------------------
# Create self-signed certificate for NGINX
# -------------------------------------------
mkdir /etc/nginx/ssl

openssl genrsa -out /etc/nginx/ssl/seafile.key 4096

cat > /etc/nginx/ssl/seafile.cnf << EOF
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_ca
prompt = no

[req_distinguished_name]
countryName = DE
stateOrProvinceName = Bayern
localityName = Wiesentheid
organizationName = Seafile
organizationalUnitName = Seahub
emailAddress = postmaster@$(hostname -d)
# Must be last for Seafile client to validate...
commonName = $(hostname -f)

[v3_ca]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints = CA:TRUE
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
DNS.2 = $(hostname -f)
DNS.3 = $(hostname -s)
IP.1 = 127.0.0.1
IP.2 = $(hostname -i | awk '{ print $1 }')
EOF

openssl req -new -x509 -key /etc/nginx/ssl/seafile.key -out /etc/nginx/ssl/seafile.crt -days 10950 -config /etc/nginx/ssl/seafile.cnf -sha256


# -------------------------------------------
# Create optimized nginx.conf
# -------------------------------------------
cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup

cat > /etc/nginx/nginx.conf <<'ENDOFFILE'
user nginx nginx;
worker_processes 1;

events {
  worker_connections 8096;
  multi_accept on;
  use epoll;
}

pid /var/run/nginx.pid;
worker_rlimit_nofile 40000;

http {
  server_tokens off;
  server_names_hash_bucket_size 128;
  client_max_body_size 50M;
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';
  access_log /var/log/nginx/access.log main;
  error_log /var/log/nginx/error.log warn;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  client_body_timeout 12;
  client_header_timeout 12;
  keepalive_timeout 15;
  send_timeout 10;
  # Fully disabled gzip compression to mitigate Django BREACH attack: https://www.djangoproject.com/weblog/2013/aug/06/breach-and-django/
  gzip off;
  #gzip_vary on;
  #gzip_proxied expired no-cache no-store private auth any;
  #gzip_comp_level 9;
  #gzip_min_length 10240;
  #gzip_buffers 16 8k;
  #gzip_http_version 1.1;
  #gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml font/woff2;
  #gzip_disable "MSIE [1-6].";
  include /etc/nginx/conf.d/*.conf;

  map $scheme $php_https {
    default off;
    https on;
  }

  include perfect-forward-secrecy.conf;
}
ENDOFFILE


# -------------------------------------------
# Setup perfect forward secrecy
# -------------------------------------------
openssl dhparam -dsaparam -out /etc/nginx/dh4096.pem 4096

cat > /etc/nginx/perfect-forward-secrecy.conf <<'EOF'
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA";
ssl_dhparam dh4096.pem;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
EOF


# -------------------------------------------
# Fix NGINX worker_processes to number of CPU cores
# -------------------------------------------
CPUS=$(cat /proc/cpuinfo | grep processor | wc | awk '{ print $1 }')
eval "sed -i 's/worker_processes.*/worker_processes  $CPUS;/g' /etc/nginx/nginx.conf"

systemctl restart nginx


# -------------------------------------------
# MariaDB
# -------------------------------------------
zypper --non-interactive install mariadb
systemctl start mysql
systemctl enable mysql

SQLROOTPW=$(pwgen 14)
mysqladmin -u root password ${SQLROOTPW}

# Securing MariaDB FIXME
#/usr/bin/mysql_secure_installation

cat > /root/.my.cnf <<EOF
[client]
user=root
password=${SQLROOTPW}
EOF

chmod 600 /root/.my.cnf


# -------------------------------------------
# Seafile init script
# -------------------------------------------
cat > /etc/systemd/system/seafile.service <<'EOF'
[Unit]
Description=Seafile Server
After=network.target mysql.service

[Service]
Type=oneshot
ExecStart=/opt/seafile/seafile-server-latest/seafile.sh start
ExecStop=/opt/seafile/seafile-server-latest/seafile.sh stop
RemainAfterExit=yes
User=seafile
Group=seafile

[Install]
WantedBy=multi-user.target
EOF

systemctl enable seafile


cat > /etc/systemd/system/seahub.service <<'EOF'
[Unit]
Description=Seafile hub
After=network.target seafile.service

[Service]
ExecStart=/opt/seafile/seafile-server-latest/seahub.sh start-fastcgi 8000
ExecStop=/opt/seafile/seafile-server-latest/seahub.sh stop
User=seafile
Group=seafile
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl enable seahub


# -------------------------------------------
# Seafile restart script
# -------------------------------------------
cat > /usr/local/sbin/seafile-restart << 'EOF'
#!/bin/bash
for ACTION in stop start ; do
    for SERVICE in seafile seahub ; do
      systemctl ${ACTION} ${SERVICE}
    done
done
EOF

chmod 700 /usr/local/sbin/seafile-restart


# -------------------------------------------
# Seafile
# -------------------------------------------
useradd --system --user-group --comment "${SEAFILE_USER}" ${SEAFILE_USER} --home-dir  /opt/seafile
mkdir -p /opt/seafile/installed
cd /opt/seafile/
cp ${SEAFILE_SOURCE} ./seafile-${SEAFILE_EDITION}_${SEAFILE_VERSION}_x86-64.tar.gz
tar xzf ./seafile-${SEAFILE_EDITION}_${SEAFILE_VERSION}_x86-64.tar.gz

mv ./seafile-${SEAFILE_EDITION}_${SEAFILE_VERSION}_x86-64.tar.gz installed/seafile-${SEAFILE_EDITION}_${SEAFILE_VERSION}_x86-64.tar.gz


# -------------------------------------------
# Seafile DB
# -------------------------------------------
SEAFILE_DB_PW=$(pwgen 14)

cat > /opt/seafile/.my.cnf <<EOF
[client]
user=seafile
password=${SEAFILE_DB_PW}
EOF

chmod 600 /opt/seafile/.my.cnf
chown -R ${SEAFILE_USER}.${SEAFILE_USER} /opt/seafile/

# Create databases
mysql -e "CREATE DATABASE IF NOT EXISTS \`ccnet-db\` character set = 'utf8';"
mysql -e "CREATE DATABASE IF NOT EXISTS \`seafile-db\` character set = 'utf8';"
mysql -e "CREATE DATABASE IF NOT EXISTS \`seahub-db\` character set = 'utf8';"

# Create user
mysql -e "CREATE USER 'seafile'@'localhost' IDENTIFIED BY '$SEAFILE_DB_PW';"

# Grant privileges on databases to user
mysql -e "GRANT ALL PRIVILEGES ON  \`ccnet-db\` . * TO  'seafile'@'localhost';"
mysql -e "GRANT ALL PRIVILEGES ON  \`seafile-db\` . * TO  'seafile'@'localhost';"
mysql -e "GRANT ALL PRIVILEGES ON  \`seahub-db\` . * TO  'seafile'@'localhost';"

# Import Seahub database structure
mysql seahub-db < /opt/seafile/seafile-${SEAFILE_EDITION}-${SEAFILE_VERSION}/seahub/sql/mysql.sql


# -------------------------------------------
# Go to /opt/seafile/seafile-${SEAFILE_EDITION}-${SEAFILE_VERSION}
# -------------------------------------------
cd /opt/seafile/seafile-${SEAFILE_EDITION}-${SEAFILE_VERSION}/


# -------------------------------------------
# Vars - Don't touch these unless you really know what you are doing!
# -------------------------------------------
SCRIPT=$(readlink -f "$0")
INSTALLPATH=/opt/seafile/seafile-${SEAFILE_EDITION}-${SEAFILE_VERSION}/
TOPDIR=$(dirname "${INSTALLPATH}")
SRC_DOCS_DIR=${INSTALLPATH}/seafile/docs/
SEAHUB_SECRET_KEYGEN=${INSTALLPATH}/seahub/tools/secret_key_generator.py
DEFAULT_CCNET_CONF_DIR=${TOPDIR}/ccnet
DEFAULT_SEAFILE_DATA_DIR=${TOPDIR}/seafile-data
DEFAULT_SEAHUB_DB=${TOPDIR}/seahub.db
DEFAULT_CONF_DIR=${TOPDIR}/conf
SEAFILE_DATA_DIR=${TOPDIR}/seafile-data
LIBRARY_TEMPLATE_DIR=${SEAFILE_DATA_DIR}/library-template
DEST_SETTINGS_PY=${TOPDIR}/seahub_settings.py
CCNET_INIT=${INSTALLPATH}/seafile/bin/ccnet-init
SEAF_SERVER_INIT=${INSTALLPATH}/seafile/bin/seaf-server-init
MEDIA_DIR=${INSTALLPATH}/seahub/media
ORIG_AVATAR_DIR=${INSTALLPATH}/seahub/media/avatars
DEST_AVATAR_DIR=${TOPDIR}/seahub-data/avatars
SEAFILE_SERVER_SYMLINK=${TOPDIR}/seafile-server-latest


# -------------------------------------------
# Create ccnet conf
# -------------------------------------------
export SEAFILE_LD_LIBRARY_PATH=${INSTALLPATH}/seafile/lib/:${INSTALLPATH}/seafile/lib64:${LD_LIBRARY_PATH}
LD_LIBRARY_PATH=$SEAFILE_LD_LIBRARY_PATH "${CCNET_INIT}" -c "${DEFAULT_CCNET_CONF_DIR}" \
  --name "${SERVER_NAME}" --port "${SERVER_PORT}" --host "${HOSTNAME}"

# Fix service url
eval "sed -i 's/^SERVICE_URL.*/SERVICE_URL = https:\/\/${HOSTNAME}/' ${DEFAULT_CCNET_CONF_DIR}/ccnet.conf"


# -------------------------------------------
# Create seafile conf
# -------------------------------------------
LD_LIBRARY_PATH=$SEAFILE_LD_LIBRARY_PATH ${SEAF_SERVER_INIT} --seafile-dir "${SEAFILE_DATA_DIR}" \
  --port ${SEAFILE_SERVER_PORT} --fileserver-port ${FILESERVER_PORT}


# -------------------------------------------
# Write seafile.ini
# -------------------------------------------
echo "${SEAFILE_DATA_DIR}" > "${DEFAULT_CCNET_CONF_DIR}/seafile.ini"


# -------------------------------------------
# Configure Seafile WebDAV Server(SeafDAV)
# -------------------------------------------
mkdir -p ${DEFAULT_CONF_DIR}
cat > ${DEFAULT_CONF_DIR}/seafdav.conf <<EOF
[WEBDAV]
enabled = true
port = 8080
fastcgi = true
share_name = /seafdav
EOF


# -------------------------------------------
# generate seahub_settings.py
# -------------------------------------------
key=$(python "${SEAHUB_SECRET_KEYGEN}")
echo "SECRET_KEY = \"${key}\"" > "${DEST_SETTINGS_PY}"


# -------------------------------------------
# prepare avatar directory
# -------------------------------------------
mkdir -p "${TOPDIR}/seahub-data"
mv "${ORIG_AVATAR_DIR}" "${DEST_AVATAR_DIR}"
ln -s ../../../seahub-data/avatars ${MEDIA_DIR}


# -------------------------------------------
# create logs directory
# -------------------------------------------
mkdir -p "${TOPDIR}/logs"


# -------------------------------------------
# Create symlink for current server version
# -------------------------------------------
ln -s $(basename ${INSTALLPATH}) ${SEAFILE_SERVER_SYMLINK}


# Fix permissions
chmod 0600 "$DEST_SETTINGS_PY"
chmod 0700 "$DEFAULT_CCNET_CONF_DIR"
chmod 0700 "$SEAFILE_DATA_DIR"
chmod 0700 "$DEFAULT_CONF_DIR"


# -------------------------------------------
# copy user manuals to library template
# -------------------------------------------
mkdir -p ${LIBRARY_TEMPLATE_DIR}
cp -f ${SRC_DOCS_DIR}/*.doc ${LIBRARY_TEMPLATE_DIR}


# -------------------------------------------
# Setup professional features
# -------------------------------------------
${INSTALLPATH}/pro/pro.py setup --mysql --mysql_host=127.0.0.1 --mysql_port=3306 --mysql_user=seafile --mysql_password=${SEAFILE_DB_PW} --mysql_db=seahub-db


# -------------------------------------------
# Configuring ccnet.conf
# -------------------------------------------
cat >> ${DEFAULT_CCNET_CONF_DIR}/ccnet.conf <<EOF

[Database]
ENGINE = mysql
HOST = 127.0.0.1
PORT = 3306
USER = seafile
PASSWD = ${SEAFILE_DB_PW}
DB = ccnet-db
CONNECTION_CHARSET = utf8
EOF


# -------------------------------------------
# Configuring seafile.conf
# -------------------------------------------
cat >> ${TOPDIR}/seafile-data/seafile.conf <<EOF

[database]
type = mysql
host = 127.0.0.1
port = 3306
user = seafile
password = ${SEAFILE_DB_PW}
db_name = seafile-db
connection_charset = utf8
EOF


# -------------------------------------------
# Configuring seahub_settings.py
# -------------------------------------------
cat >> ${DEST_SETTINGS_PY} <<EOF

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'seahub-db',
        'USER': 'seafile',
        'PASSWORD': '${SEAFILE_DB_PW}',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': 'SET storage_engine=INNODB',
        }
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
    'LOCATION': '127.0.0.1:11211',
    }
}

EMAIL_USE_TLS                       = False
EMAIL_HOST                          = 'localhost'
EMAIL_HOST_USER                     = ''
EMAIL_HOST_PASSWORD                 = ''
EMAIL_PORT                          = '25'
DEFAULT_FROM_EMAIL                  = 'noreply@${HOSTNAME}'
SERVER_EMAIL                        = 'EMAIL_HOST_USER'
TIME_ZONE                           = '${SEAFILE_TIME_ZONE}'
SITE_BASE                           = 'https://${HOSTNAME}'
SITE_NAME                           = 'Seafile Server'
SITE_TITLE                          = 'Seafile Server'
ENABLE_SIGNUP                       = False
ACTIVATE_AFTER_REGISTRATION         = False
SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER  = True
SEND_EMAIL_ON_RESETTING_USER_PASSWD = True
CLOUD_MODE                          = False
FILE_PREVIEW_MAX_SIZE               = 30 * 1024 * 1024
SESSION_COOKIE_AGE                  = 60 * 60 * 24 * 7 * 2
SESSION_SAVE_EVERY_REQUEST          = False
SESSION_EXPIRE_AT_BROWSER_CLOSE     = False
FILE_SERVER_ROOT                    = 'https://${HOSTNAME}/seafhttp'
REPO_PASSWORD_MIN_LENGTH            = 8
USER_PASSWORD_MIN_LENGTH            = 6
USER_PASSWORD_STRENGTH_LEVEL        = 3
USER_STRONG_PASSWORD_REQUIRED       = True
ENABLE_MAKE_GROUP_PUBLIC            = False
ENABLE_THUMBNAIL                    = True
THUMBNAIL_ROOT                      = '${TOPDIR}/seahub-data/thumbnail/thumb/'
REPO_PASSWORD_MIN_LENGTH            = 8
USER_PASSWORD_MIN_LENGTH            = 8
USER_PASSWORD_STRENGTH_LEVEL        = 3
USER_STRONG_PASSWORD_REQUIRED       = True
EOF


# -------------------------------------------
# Backup check_init_admin.py befor applying changes
# -------------------------------------------
cp ${INSTALLPATH}/check_init_admin.py ${INSTALLPATH}/check_init_admin.py.backup


# -------------------------------------------
# Set admin credentials in check_init_admin.py
# -------------------------------------------
SEAFILE_ADMIN_PW=$(pwgen 14)
eval "sed -i 's/= ask_admin_email()/= \"${SEAFILE_ADMIN}\"/' ${INSTALLPATH}/check_init_admin.py"
eval "sed -i 's/= ask_admin_password()/= \"${SEAFILE_ADMIN_PW}\"/' ${INSTALLPATH}/check_init_admin.py"


# -------------------------------------------
# Start and stop Seafile eco system. This generates the initial admin user.
# -------------------------------------------
${TOPDIR}/seafile-${SEAFILE_EDITION}-${SEAFILE_VERSION}/seafile.sh start
${TOPDIR}/seafile-${SEAFILE_EDITION}-${SEAFILE_VERSION}/seahub.sh start
${TOPDIR}/seafile-${SEAFILE_EDITION}-${SEAFILE_VERSION}/seahub.sh stop
${TOPDIR}/seafile-${SEAFILE_EDITION}-${SEAFILE_VERSION}/seafile.sh stop


# -------------------------------------------
# Restore original check_init_admin.py
# -------------------------------------------
mv ${INSTALLPATH}/check_init_admin.py.backup ${INSTALLPATH}/check_init_admin.py


# -------------------------------------------
# Fix permissions
# -------------------------------------------
chown ${SEAFILE_USER}.${SEAFILE_USER} -R /opt/seafile/


# -------------------------------------------
# Enable office preview in Seahub
# -------------------------------------------
sed -i 's/enabled = false/enabled = true/' ${TOPDIR}/pro-data/seafevents.conf


# -------------------------------------------
# Start seafile server
# -------------------------------------------
seafile-restart


# -------------------------------------------
# Final report
# -------------------------------------------
cat > ${SEAFILE_DIR}/$(basename ${0})_report.log<<EOF

  Your Seafile server
  -----------------------------------------------------------------

  Server Name:         ${SERVER_NAME}
  Server Address:      https://${HOSTNAME}

  Seafile Admin:       ${SEAFILE_ADMIN}
  Admin Password:      ${SEAFILE_ADMIN_PW}

  Seafile Data Dir:    ${SEAFILE_DATA_DIR}

  Seafile DB Credentials:  Check /opt/seafile/.my.cnf
  Root DB Credentials:     Check /root/.my.cnf

  Switch to Seafile system account with: su - ${SEAFILE_USER} -s /bin/bash


  Next you should manually complete the following steps
  -----------------------------------------------------------------

  1) If this server is behind a firewall, you need to ensure that
     tcp port 443 for the NGINX reverse proxy is open. Optionally
     you may also open tcp port 80 which redirects all unencrypted
     http traffic to the encrypted https port.

  2) Seahub tries to send emails via the local Postfix mail server.
     Make sure Postfix is setup correctly for your environment.


  Optional steps
  -----------------------------------------------------------------

  1) Run seafile-server-change-address to change your Seafile servers DNS name.

  2) Check seahub_settings.py and customize it to fit your needs. Consult
     http://manual.seafile.com/config/seahub_settings_py.html for possible switches.

  3) Setup NGINX with official SSL certificate.

  4) Harden system with port knocking, fail2ban, etc.

  5) Implement a backup routine for your Seafile server.


  Seafile support options
  -----------------------------------------------------------------

  For free community support visit:   https://forum.seafile-server.org
  For paid commercial support visit:  https://seafile.de


  Debug infos
  -----------------------------------------------------------------
  If the installation fails for any reason, review
  /root/$(basename ${0})_installation.log
  or send us the log by mail to $(basename ${0})@seafile.de


  Contribute
  -----------------------------------------------------------------
  Please contact alexander.jackson@seafile.de
  for bugs or suggestions about this installer. Thank you!


  This report is also saved to ${SEAFILE_DIR}/$(basename ${0})_report.log

EOF

chmod 600 ${SEAFILE_DIR}/$(basename ${0})_report.log
chown -R ${SEAFILE_USER}.${SEAFILE_USER} ${SEAFILE_DIR}/$(basename ${0})_report.log


# -------------------------------------------
# Install seafile-server-change-address script
# -------------------------------------------
cat > /usr/local/sbin/seafile-server-change-address <<'ENDOFILE'
#/bin/bash
#set -x
# -------------------------------------------
# Save at /usr/local/sbin/seafile-server-change-address and set permissions with
# chmod 500 /usr/local/sbin/seafile-server-change-address
# -------------------------------------------


# -------------------------------------------
# Vars
# -------------------------------------------
HOSTNAME=$(hostname -f)
SEAFILE_DIR=/opt/seafile


# -------------------------------------------
# Intro
# -------------------------------------------
clear
cat <<EOF

  Deutsch
  -------------------------------------------
  Mit diesem Skript können Sie die Adresse Ihres
  Seafile Serves ändern. Das ist zum Beispiel nötig wenn
  sich Ihre Domain- oder IP-Adresse geändert hat.

  Wird Seafile mit der falschen Adresse betrieben,
  funktioniert der Up- und Download von Dateien nicht.

  Soll der Server mittes Portweiterleitung erreichbar
  sein, verwenden Sie bitte die öffentliche oder externe
  IP Ihres Routers bzw. einen öffentlich Domainnamen.

  Bei Falscheingaben rufen Sie das Skript bitte erneut auf.

  Der aktuelle Hostname wird vorausgefüllt. Ggf. einfach
  ändern.


  English
  -------------------------------------------
  With this script you can change the address of your
  Seafile server. For example this is necessary if
  your DNS or IP address has changed.

  If the wrong address is set, up- and downloads will not work.

  If the needs to be accessible from the WAN, but resides behind
  a NAT router use the public IP or better the external DNS address.

  If you made a mistake setting up the address, just run this skript again.

  The current hostname is pre-populated. If necessary, simply change
  it to fit your needs.

EOF

echo "Geben Sie jetzt die neue IP oder Domainadresse"
echo "Enter your new IP or DNS name"
read -e -p "Neue Domainadresse:" -i " ${HOSTNAME}" URL


cat <<EOF

  Die eingebenen Adresse lautet: ${URL}
  Your new address: ${URL}

  -------------------------------------------
  Fortfahren mit ENTER. Abruch mit STRG-C...
  Proceed with ENTER. Abort with CTRL-C...

EOF
read dummy


# -------------------------------------------
# Aendere Adressen in seahub_settings.py und ccnet.conf
# -------------------------------------------
echo Applying changes
sed -i "s/^SITE_BASE.*/SITE_BASE = \'${URL}\'/g" ${SEAFILE_DIR}/seahub_settings.py
sed -i "s/^SITE_NAME.*/SITE_NAME = \'${URL}\'/g" ${SEAFILE_DIR}/seahub_settings.py
sed -i "s/^SITE_TITLE.*/SITE_TITLE = \'${URL}\'/g" ${SEAFILE_DIR}/seahub_settings.py
sed -i "s/^FILE_SERVER_ROOT.*/FILE_SERVER_ROOT = '\https:\/\/${URL}\/seafhttp\'/g" ${SEAFILE_DIR}/seahub_settings.py
sed -i "s/^SERVICE_URL.*/SERVICE_URL = https:\/\/${URL}/g" ${SEAFILE_DIR}/ccnet/ccnet.conf


# -------------------------------------------
# Starte Seafile neu
# -------------------------------------------
seafile-restart


# -------------------------------------------
# Outro
# -------------------------------------------
clear
cat <<EOF

  Deutsch
  -------------------------------------------
  Fertig! Der Seafile Server wurde neu gestartet.

  Seahub sollte nun über https://${HOSTNAME} erreichbar sein.


  English
  -------------------------------------------
  Done! Your Seafile Server has been restarted.

  Seahub should be reachable at https://${HOSTNAME}.

EOF
ENDOFILE

chmod 500 /usr/local/sbin/seafile-server-change-address


# -------------------------------------------
# Report
# -------------------------------------------
print-system-infos

cat ${SEAFILE_DIR}/$(basename ${0})_report.log


# -------------------------------------------
# Done!
# -------------------------------------------
) 2>&1 | tee /root/$(basename ${0})_installation.log
chmod 600 /root/$(basename ${0})_installation.log
